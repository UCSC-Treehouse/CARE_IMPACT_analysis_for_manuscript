# Deferred
"Standard of care",
"No further treatment needed",
"Treatment with more disease data",
# Declined
"Evidence against Treehouse therapy",
"Not FDA approved")
nodes_in_order_for_color <- c(  #positive events
"Prioritized",
"Implemented",
"Response",
#second rank events
"Progression",
"Not implemented",
"Rapid disease progression",
# Not implemented
"Waiting for treatment approval",
"Therapy unavailable",
# deferred
"Deferred",
"Standard of care",
"No further treatment needed",
"Treatment with more disease data",
"Declined",
"Evidence against Treehouse therapy",
"Not FDA approved")
nodes <- tibble(name = unique(c(tx_treatments_raw$TH_donorID,
tx_treatments_raw$`Case prioritization`,
tx_treatments_raw$Reason,
tx_treatments_raw$`Implementation reason for prioritized findings`))) %>%
na.omit() %>%
mutate(name_factor = factor(name) %>%
fct_relevel(c(tx_treatments_raw$TH_donorID,
nodes_in_order_for_plotting))) %>%
arrange(name_factor) %>%
mutate(node = 0:(n()-1))
# links <- source target value
donor_to_prioritization <- tx_treatments_raw %>%
select(TH_donorID, `Case prioritization`) %>%
left_join(nodes, by=c("TH_donorID"="name")) %>%
rename(source = node) %>%
left_join(nodes, by=c(`Case prioritization`="name")) %>%
rename(target = node) %>%
mutate(value = 1)
prioritization_to_reason <- tx_treatments_raw %>%
select(`Case prioritization`, Reason) %>%
left_join(nodes, by=c("Case prioritization"="name")) %>%
rename(source = node) %>%
left_join(nodes, by=c("Reason"="name")) %>%
rename(target = node) %>%
mutate(value = 1)
reason_to_implementation <-  tx_treatments_raw %>%
select(Reason, `Implementation reason for prioritized findings`) %>%
left_join(nodes, by=c("Reason"="name")) %>%
rename(source = node) %>%
left_join(nodes, by=c("Implementation reason for prioritized findings"="name")) %>%
rename(target = node) %>%
mutate(value = 1) %>%
na.omit
links_noisy <- bind_rows(donor_to_prioritization,
prioritization_to_reason,
reason_to_implementation)
links <- links_noisy %>%
select(source, target, value) %>%
arrange(source, target, value)
sample_id_placeholder <- ""
# nodes_wo_sample_names <- nodes %>%
#    mutate(name2  = name)
nodes_wo_sample_names <- nodes %>%
#  mutate(name2 = name)
mutate(name2 = case_when(str_detect(name_factor, "^TH[0-9]") ~ sample_id_placeholder,
TRUE ~ name))
names_to_color_blue <- tibble(name = c("Prioritized", "Implemented", "Response"),
color_code = brewer.pal(name="Blues",n=6)[3:5])
sample_box_colors <- tibble(name = sample_id_placeholder,
color_code = "#D3D3D3")
node_names <- tibble(name = unique(nodes_wo_sample_names$name2)) %>%
filter(! name %in% c(names_to_color_blue$name, sample_box_colors$name)) %>%
mutate(name_f = factor(name, levels = nodes_in_order_for_color)) %>%
arrange(name_f) %>%
mutate(color_code = heat_hcl(n(),rev=TRUE, c=c(60,20),l=c(60,100),power=1)) %>%
bind_rows(names_to_color_blue) %>%
bind_rows(sample_box_colors)
color_specification <- JS(
sprintf(
'd3.scaleOrdinal()
.domain(%s)
.range(%s)
',
jsonlite::toJSON(node_names$name),
jsonlite::toJSON(node_names$color_code)
)
)
setdiff(node_names$name, nodes_wo_sample_names$name2) # expected output: character(0)
setdiff(nodes_wo_sample_names$name2, node_names$name) # expected output: character(0)
update_names <- function(x) {
str_replace_all(x, "Standard of care",
"Received therapy considered standard of care") %>%
str_replace_all("Treatment with more disease data",
"Received therapy with more published evidence of efficacy") %>%
str_replace_all("Evidence against Treehouse therapy",
"Evidence against therapy identified by CARE analysis")
}
nodes_wo_sample_names
networkD3::sankeyNetwork(Links = links, Nodes = nodes_wo_sample_names, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name2',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
nodes_wo_sample_names
all_nodes <- tibble(name = c(tx_treatments_raw$TH_donorID,
tx_treatments_raw$`Case prioritization`,
tx_treatments_raw$Reason,
tx_treatments_raw$`Implementation reason for prioritized findings`)) %>%
na.omit()
nodes <- all_nodes %>%
distinct() %>%
mutate(name_factor = factor(name) %>%
fct_relevel(c(tx_treatments_raw$TH_donorID,
nodes_in_order_for_plotting))) %>%
arrange(name_factor) %>%
mutate(node = 0:(n()-1))
all_nodes
all_nodes
all_nodes  %>%
mutate(is_donor = str_detect(unnumbered_name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
group_by(unnumbered_name, is_donor) %>%
summarize(n = n())
all_nodes
all_nodes  %>%
mutate(is_donor = str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
group_by(name, is_donor) %>%
summarize(n = n())
all_nodes  %>%
mutate(is_donor = str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name, is_donor) %>%
summarize(n = n()) %>%
mutate(name = ifelse(is_donor,
updated_unnumbered_name,
paste0(unnumbered_name, " (n=", n, ")")))
all_nodes  %>%
mutate(is_donor = str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name, is_donor) %>%
summarize(n = n()) %>%
mutate(name = ifelse(is_donor,
unnumbered_name,
paste0(unnumbered_name, " (n=", n, ")")))
nodes_wo_sample_names
all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(unnumbered_name, " (n=", n, ")"))
nodes_wo_sample_names
?right_join
all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(unnumbered_name, " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name"))
updated_nodes_wo_sample_names <- all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(unnumbered_name, " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name"))
networkD3::sankeyNetwork(Links = links, Nodes = updated_nodes_wo_sample_names, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
updated_nodes_wo_sample_names
nodes_wo_sample_names
updated_nodes_wo_sample_names <- all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(unnumbered_name, " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name")) %>%
replace_na(list(name = ""))
networkD3::sankeyNetwork(Links = links, Nodes = updated_nodes_wo_sample_names, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
nodes_wo_sample_names
networkD3::sankeyNetwork(Links = links, Nodes = nodes_wo_sample_names, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name2',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
updated_nodes_wo_sample_names
nodes_wo_sample_names
networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node),
Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
nodes_wo_sample_names
updated_nodes_wo_sample_names %>%
select(name, node)
networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
?networkD3::sankeyNetwork
update_names <- function(x) {
str_replace_all(x, "Standard of care",
"Received therapy considered standard of care") %>%
str_replace_all("Treatment with more disease data",
"Received therapy with more published evidence of efficacy") %>%
str_replace_all("Evidence against Treehouse therapy",
"Evidence against therapy identified by CARE analysis") %>%
str_replace_all("Prioritized",
"Accepted and prioritized") %>%
str_replace_all("Deferred",
"Accepted and Deferred")
}
updated_nodes_wo_sample_names <- all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(update_names(unnumbered_name), " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name")) %>%
replace_na(list(name = ""))
networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
update_names <- function(x) {
str_replace_all(x, "Standard of care",
"Received therapy considered standard of care") %>%
str_replace_all("Treatment with more disease data",
"Received therapy with more published evidence of efficacy") %>%
str_replace_all("Evidence against Treehouse therapy",
"Evidence against therapy identified by CARE analysis") %>%
str_replace_all("Prioritized",
"Accepted and \nprioritized") %>%
str_replace_all("Deferred",
"Accepted and \ndeferred")
}
updated_nodes_wo_sample_names <- all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(update_names(unnumbered_name), " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name")) %>%
replace_na(list(name = ""))
networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
update_names <- function(x) {
str_replace_all(x, "Standard of care",
"Received therapy considered standard of care") %>%
str_replace_all("Treatment with more disease data",
"Received therapy with more published evidence of efficacy") %>%
str_replace_all("Evidence against Treehouse therapy",
"Evidence against therapy identified by CARE analysis") %>%
str_replace_all("Prioritized",
"Accepted and \nprioritized") %>%
str_replace_all("Deferred",
"Accepted and \ndeferred")
}
updated_nodes_wo_sample_names <- all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(update_names(unnumbered_name), " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name")) %>%
replace_na(list(name = ""))
networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
sessionInfo()
set.seed(1999)
links <- data.table(
src = rep(0:4, times=c(1,1,2,3,5)),
target = sample(1:11, 12, TRUE),
value = sample(100, 12)
)[src < target, ]  # no loops
library(data.table)
set.seed(1999)
links <- data.table(
src = rep(0:4, times=c(1,1,2,3,5)),
target = sample(1:11, 12, TRUE),
value = sample(100, 12)
)[src < target, ]  # no loops
nodes <- data.table(name=LETTERS[1:12])
## Add text to label
txt <- links[, .(total = sum(value)), by=c('target')]
nodes[txt$target+1L, name := paste0(name, '<br>(', txt$total, ')')]
## Displays the counts as part of the labels
sn <- sankeyNetwork(Links=links, Nodes=nodes, Source='src', Target='target',
Value='value', NodeID='name', fontSize=16, width=600, height=300)
onRender(sn,
'
function(el,x) {
d3.selectAll(".node text").remove()
d3.selectAll(".node")
.append("foreignObject")
.attr("width", 100)
.attr("height", 50)
.html(function(d) { return d.name; })
}
'
)
library(htmlwidgets)
set.seed(1999)
links <- data.table(
src = rep(0:4, times=c(1,1,2,3,5)),
target = sample(1:11, 12, TRUE),
value = sample(100, 12)
)[src < target, ]  # no loops
nodes <- data.table(name=LETTERS[1:12])
## Add text to label
txt <- links[, .(total = sum(value)), by=c('target')]
nodes[txt$target+1L, name := paste0(name, '<br>(', txt$total, ')')]
## Displays the counts as part of the labels
sn <- sankeyNetwork(Links=links, Nodes=nodes, Source='src', Target='target',
Value='value', NodeID='name', fontSize=16, width=600, height=300)
onRender(sn,
'
function(el,x) {
d3.selectAll(".node text").remove()
d3.selectAll(".node")
.append("foreignObject")
.attr("width", 100)
.attr("height", 50)
.html(function(d) { return d.name; })
}
'
)
nodes
update_names <- function(x) {
str_replace_all(x, "Standard of care",
"Received therapy considered standard of care") %>%
str_replace_all("Treatment with more disease data",
"Received therapy with more published evidence of efficacy") %>%
str_replace_all("Evidence against Treehouse therapy",
"Evidence against therapy identified by CARE analysis") %>%
str_replace_all("Prioritized",
"Accepted and <br>prioritized") %>%
str_replace_all("Deferred",
"Accepted and <br>ndeferred")
}
updated_nodes_wo_sample_names <- all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(update_names(unnumbered_name), " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name")) %>%
replace_na(list(name = ""))
sn2 <- networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
sn2 <- networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
update_names <- function(x) {
str_replace_all(x, "Standard of care",
"Received therapy considered standard of care") %>%
str_replace_all("Treatment with more disease data",
"Received therapy with more published evidence of efficacy") %>%
str_replace_all("Evidence against Treehouse therapy",
"Evidence against therapy identified by CARE analysis") %>%
str_replace_all("Prioritized",
"Accepted and prioritized") %>%
str_replace_all("Deferred",
"Accepted and ndeferred")
}
updated_nodes_wo_sample_names <- all_nodes  %>%
filter(!str_detect(name, "TH[R]?[0-9]{2}_[0-9]{4}")) %>%
rename(unnumbered_name = name) %>%
group_by(unnumbered_name) %>%
summarize(n = n()) %>%
mutate(name = paste0(update_names(unnumbered_name), " (n=", n, ")")) %>%
right_join(nodes_wo_sample_names, by=c("unnumbered_name" = "name")) %>%
replace_na(list(name = ""))
networkD3::sankeyNetwork(Links = links,
Nodes = updated_nodes_wo_sample_names %>%
select(name, node) %>%
arrange(node),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = '',
sinksRight = FALSE,
nodeWidth = 40,
fontSize = 13,
nodePadding = 5,
iterations = 10,
colourScale = color_specification)
